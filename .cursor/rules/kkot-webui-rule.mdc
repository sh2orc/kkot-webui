# KKOT WebUI - Cursor Rules

## Project Overview
KKOT WebUI is a universal web interface for various LLM services (OpenAI, Gemini, Ollama, vLLM, etc.).

## Technology Stack

### Framework & Language
- **Framework**: Next.js 15.2.4 (App Router)
- **Language**: TypeScript
- **Runtime**: Node.js 18.0+

### Database & ORM
- **Database**: SQLite (development), PostgreSQL (production)
- **ORM**: Drizzle ORM with better-sqlite3
- **Migration**: Automatic migration system (scripts/migrate.ts)
- **Schema**: Multi-DB support (SQLite/PostgreSQL)

### UI & Styling
- **Styling**: Tailwind CSS with tailwind-merge
- **UI Components**: Radix UI component system
- **Icons**: Lucide React
- **Theme**: next-themes (dark/light mode)
- **Animations**: tailwindcss-animate
- **Notifications**: Sonner toast

### Forms & Validation
- **Form Management**: React Hook Form
- **Validation**: Zod schema validation
- **Resolvers**: @hookform/resolvers/zod

### AI & LLM Integration
- **LangChain**: @langchain/core, @langchain/community
- **OpenAI**: @langchain/openai
- **Google AI**: @langchain/google-genai
- **LangGraph**: @langchain/langgraph
- **Factory Pattern**: Provider management via LLMFactory
- **Deep Research**: Advanced multi-step analysis system with DeepResearchProcessor
- **Research Architecture**: Modular step-by-step processing with streaming support

### State Management & Context
- **State Management**: React Context API
- **Providers**: BrandingProvider, LanguageProvider, ModelProvider
- **Client Providers**: Suspense-based hierarchical provider structure

### Authentication & Authorization
- **Authentication**: NextAuth.js v4 with JWT strategy
- **Session Management**: JWT-based session with 24-hour expiry
- **Password Security**: PBKDF2 with 10,000 iterations and 16-byte salt
- **Route Protection**: Custom middleware for protected routes
- **User Management**: Built-in registration/login with role-based access
- **Admin System**: First user automatically assigned admin role

### Internationalization
- **i18n**: Custom i18n system (Korean/English)
- **Translation Files**: JSON-based modular translation files
- **Dynamic Loading**: Dynamic loading and caching of translation modules
- **Context**: Global language state management via LanguageContext

## Database Structure & Backend Architecture

### Database Schema Overview
The project uses a multi-database architecture supporting both SQLite and PostgreSQL with identical schema definitions.

#### Core Tables

##### 1. Users (`users`)
- **Purpose**: User management and authentication
- **Fields**:
  - `id`: Primary key (TEXT for SQLite, SERIAL for PostgreSQL)
  - `username`: Unique username
  - `email`: User email
  - `password`: Hashed password (PBKDF2)
  - `role`: User role ('user', 'admin')
  - `createdAt`, `updatedAt`: Timestamps

##### 2. Chat Sessions (`chat_sessions`)
- **Purpose**: Chat session management
- **Fields**:
  - `id`: Primary key
  - `userId`: Foreign key to users table
  - `title`: Session title
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: 
  - One-to-many with users
  - One-to-many with chat messages

##### 3. Chat Messages (`chat_messages`)
- **Purpose**: Individual chat messages storage
- **Fields**:
  - `id`: Primary key
  - `sessionId`: Foreign key to chat_sessions
  - `role`: Message role ('user', 'assistant')
  - `content`: Message content
  - `contentType`: Content type ('text', 'multimodal')
  - `attachments`: JSON string for multimodal content
  - `createdAt`: Timestamp
- **Relationships**: Many-to-one with chat sessions

#### LLM Management Tables

##### 4. LLM Servers (`llm_servers`)
- **Purpose**: LLM server configuration and management
- **Fields**:
  - `id`: Primary key
  - `provider`: Provider type ('openai', 'gemini', 'ollama', 'vllm', 'custom')
  - `name`: Server name
  - `baseUrl`: Server URL
  - `apiKey`: API key (encrypted)
  - `models`: JSON string of available models
  - `enabled`: Boolean flag
  - `isDefault`: Default server flag
  - `settings`: JSON string for provider-specific settings
  - `createdAt`, `updatedAt`: Timestamps

##### 5. LLM Models (`llm_models`)
- **Purpose**: Individual model configuration
- **Fields**:
  - `id`: Primary key
  - `serverId`: Foreign key to llm_servers
  - `modelId`: Actual model ID (e.g., 'gpt-4')
  - `provider`: Provider type
  - `enabled`: Boolean flag
  - `isPublic`: Public availability flag
  - `capabilities`: JSON string for model capabilities
  - `contextLength`: Context window size
  - `supportsMultimodal`: Multimodal support flag
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: Many-to-one with llm_servers

##### 6. Agent Management (`agent_manage`)
- **Purpose**: AI agent configuration and management
- **Fields**:
  - `id`: Primary key
  - `agentId`: Unique agent identifier
  - `modelId`: Foreign key to llm_models
  - `name`: Agent name
  - `systemPrompt`: System prompt
  - `temperature`: Temperature setting
  - `topK`, `topP`: Sampling parameters
  - `maxTokens`: Maximum tokens
  - `presencePenalty`, `frequencyPenalty`: Penalty settings
  - `imageData`: Binary image data (BLOB)
  - `description`: Agent description
  - `enabled`: Boolean flag
  - `parameterEnabled`: Parameter customization flag
  - `supportsMultimodal`: Multimodal support flag
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: Many-to-one with llm_models

#### API Management Tables

##### 7. API Management (`api_management`)
- **Purpose**: Global API service configuration
- **Fields**:
  - `id`: Primary key (typically 'default')
  - `apiEnabled`: API service enabled flag
  - `corsEnabled`: CORS enabled flag
  - `corsOrigins`: CORS origins configuration
  - `rateLimitEnabled`: Rate limiting enabled flag
  - `rateLimitRequests`: Rate limit requests count
  - `rateLimitWindow`: Rate limit window (seconds)
  - `requireAuth`: Authentication requirement flag
  - `openaiCompatible`: OpenAI API compatibility flag
  - `createdAt`, `updatedAt`: Timestamps

##### 8. API Keys (`api_keys`)
- **Purpose**: API key management for external access
- **Fields**:
  - `id`: Primary key
  - `name`: Key name
  - `keyHash`: Hashed API key
  - `keyPrefix`: Key prefix for display
  - `userId`: Foreign key to users (optional)
  - `permissions`: JSON array of permissions
  - `rateLimitTier`: Rate limit tier ('basic', 'premium', 'unlimited')
  - `maxRequestsPerHour`, `maxRequestsPerDay`: Rate limits
  - `expiresAt`: Expiration timestamp
  - `lastUsedAt`: Last usage timestamp
  - `isActive`: Active flag
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: Many-to-one with users (optional)

##### 9. API Usage (`api_usage`)
- **Purpose**: API usage tracking and analytics
- **Fields**:
  - `id`: Primary key
  - `apiKeyId`: Foreign key to api_keys
  - `endpoint`: API endpoint
  - `method`: HTTP method
  - `statusCode`: Response status code
  - `tokensUsed`: Tokens consumed
  - `responseTimeMs`: Response time
  - `errorMessage`: Error message (if any)
  - `ipAddress`: Client IP address
  - `userAgent`: Client user agent
  - `createdAt`: Timestamp
- **Relationships**: Many-to-one with api_keys

#### Settings Tables

##### 10. System Settings (`system_settings`)
- **Purpose**: Global system configuration
- **Fields**:
  - `id`: Primary key
  - `key`: Setting key
  - `value`: Setting value (JSON string)
  - `updatedAt`: Timestamp

##### 11. Service Settings Tables
- **Web Search Settings (`web_search_settings`)**: SearchXNG, Google, Bing configuration
- **Image Settings (`image_settings`)**: OpenAI, Stability AI, local image generation
- **Audio Settings (`audio_settings`)**: OpenAI, ElevenLabs, local audio processing

### Repository Pattern Implementation

#### Repository Structure (`lib/db/repository.ts`)
- **Purpose**: Data access layer abstraction
- **Pattern**: Repository pattern with transaction support
- **Functions**:
  - `userRepository`: User CRUD operations
  - `chatSessionRepository`: Chat session management
  - `chatMessageRepository`: Message operations with cascade delete
  - `apiConnectionRepository`: API connection management
  - `llmServerRepository`: LLM server operations
  - `agentRepository`: Agent management
  - `apiManagementRepository`: API management operations

#### Key Repository Features
- **Type Safety**: Leverages Drizzle ORM type inference
- **Transaction Support**: Atomic operations for complex changes
- **Cascade Operations**: Proper foreign key relationships
- **ID Generation**: Custom ID generation for consistent formatting
- **Multi-DB Support**: Handles both SQLite and PostgreSQL

### Migration System

#### Migration Files (`lib/db/migrations/`)
- **0000_initial.sql**: Base schema creation
- **0001_llm_servers.sql**: LLM server management
- **0002_llm_models.sql**: LLM model configuration
- **0003_agent_manage.sql**: Agent management system
- **0004_api_management.sql**: API management and usage tracking

#### Migration Process
- **Automatic**: Runs on application startup
- **Version Control**: Tracks applied migrations
- **Rollback**: Supports rollback functionality
- **Multi-DB**: Handles both SQLite and PostgreSQL schemas

## Coding Rules

### 1. File Structure and Naming Conventions
- **Components**: PascalCase (e.g., `ChatInput.tsx`)
- **Pages**: kebab-case (e.g., `agent-management-form.tsx`)
- **Hooks**: camelCase with `use` prefix (e.g., `useDatabase.ts`)
- **Utilities**: camelCase (e.g., `utils.ts`)
- **API Routes**: RESTful structure (`route.ts`)
- **Comments**: All source code comments must be written in English

### 2. Component Writing Rules
- Use React functional components
- Set `displayName` when using `forwardRef`
- Define props types as interfaces
- Use default exports

```typescript
interface ComponentProps {
  title: string;
  children?: React.ReactNode;
}

const Component = ({ title, children }: ComponentProps) => {
  return <div>{title}</div>;
};

export default Component;
```

### 3. Styling Rules
- Use Tailwind CSS classes
- Apply conditional classes with `cn()` function
- Define variants using `class-variance-authority`
- Consider responsive design (mobile-first)

### 4. Database Rules
- **Schema Definition**: Multi-DB support for SQLite/PostgreSQL in `lib/db/schema.ts`
- **Repository Pattern**: Data access layer in `lib/db/repository.ts`
- **Server-only**: Ensure server-side only with `'server-only'` import
- **Migration**: Schema change management via `scripts/migrate.ts`
- **Type Safety**: Leverage Drizzle ORM type inference
- **Transactions**: Use transactions for complex data changes

```typescript
// Schema definition example
export const users = getDbType() === 'sqlite' 
  ? sqliteTable('users', { /* SQLite schema */ })
  : pgTable('users', { /* PostgreSQL schema */ });
```

### 5. API Route Rules
- RESTful API design
- Use appropriate HTTP status codes
- Implement error handling
- Type-safe response structure

```typescript
// app/api/example/route.ts
export async function GET() {
  try {
    // Logic implementation
    return Response.json({ data: result });
  } catch (error) {
    return Response.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
```

### 6. Form Handling Rules
- Use React Hook Form + Zod combination
- Schema-based validation
- Internationalized error messages

```typescript
const schema = z.object({
  name: z.string().min(1, 'Name is required'),
});

const form = useForm<z.infer<typeof schema>>({
  resolver: zodResolver(schema),
});
```

### 7. Internationalization Rules
- **Translation Files**: `i18n/{language}/{module}.json` structure
- **Dynamic Loading**: Load on-demand via `loadTranslationModule()`
- **Caching**: Performance optimization with `translationCache`
- **Hook Usage**: Component-specific translations via `useTranslation(module)`
- **Key Structure**: Hierarchical translation keys with dot notation (e.g., `admin.general.title`)
- **Translation Modules**: All translation modules must be defined in `components/providers/language-provider.tsx` in the `translationModules` array when adding new i18n modules

```typescript
// Translation usage example
const { t, lang } = useTranslation('admin.general');
const title = await t('settings.title'); // Async
const label = lang('form.label'); // Sync (when cached)
```

### 8. Authentication Rules
- **NextAuth Configuration**: JWT strategy with custom credential provider
- **Password Hashing**: Use `hashPassword()` and `verifyPassword()` from `lib/auth.ts`
- **Route Protection**: Protected routes via middleware configuration
- **Session Handling**: 24-hour session expiry with automatic renewal
- **Error Handling**: Proper error messages for auth failures
- **Admin Check**: First user registration automatically gets admin role

```typescript
// Authentication usage example
import { hashPassword, verifyPassword } from '@/lib/auth'

// Password hashing
const hashedPassword = hashPassword(plainPassword)

// Password verification
const isValid = verifyPassword(plainPassword, hashedPassword)

// NextAuth session access
const { data: session, status } = useSession()
```

### 9. LLM Integration Rules
- **Factory Pattern**: Create provider instances via `LLMFactory.create(config)`
- **Base Class**: Provider-specific implementations inheriting from `BaseLLM`
- **Config Management**: Standardized configuration via `LLMModelConfig` type
- **Streaming**: Real-time response streaming support
- **Error Handling**: Provider-specific error handling and fallback

```typescript
// LLM usage example
const llm = LLMFactory.create({
  provider: 'openai',
  modelName: 'gpt-4',
  apiKey: process.env.OPENAI_API_KEY
});
```

### 10. Middleware Rules
- **Route Protection**: Configure protected routes in `config.matcher`
- **Authentication Check**: Verify NextAuth session tokens
- **API Response**: Return 401 for unauthorized API requests
- **Redirect Logic**: Redirect unauthenticated users to `/auth`
- **Public Routes**: Allow access to `/auth` and static assets

```typescript
// Middleware configuration example
export const config = {
  matcher: [
    '/api/agents/:path*',
    '/admin/:path*',
    '/chat/:path*',
    '/',
  ],
};
```

### 11. Backend Development Rules

#### Database Operations
- **Repository Usage**: Always use repository pattern for data access
- **Transaction Handling**: Use transactions for multi-table operations
- **Error Handling**: Proper error catching and logging
- **Validation**: Server-side validation for all data operations
- **Image Data**: Image data should be stored in the database as Base64 encoding instead of BLOB. When reading images from the database, use Buffer.from(agent.imageData).toString() to convert to Base64 string, then add the data:image/png;base64, prefix to convert to image URL format.
- **Message Rating**: Chat messages support rating system with values (-1 for dislike, 0 for neutral, +1 for like) to collect user feedback on AI responses.
- **Agent Features**: Agents support additional feature flags like `supportsDeepResearch` and `supportsWebSearch` to enable specific capabilities for different agent types.

```typescript
// Database operation example
import { userRepository } from '@/lib/db/repository';

// Create user with proper error handling
try {
  const user = await userRepository.create({
    username: 'Taeyoung',
    email: 'sh2orc@gmail.com',
    password: hashedPassword,
    role: 'user'
  });
} catch (error) {
  console.error('User creation failed:', error);
  throw new Error('Failed to create user');
}
```

#### API Development
- **OpenAPI Compatible**: Follow OpenAI API compatibility standards
- **Rate Limiting**: Implement rate limiting for API endpoints
- **API Key Management**: Secure API key handling and validation
- **Usage Tracking**: Track API usage for analytics and billing

```typescript
// API endpoint with rate limiting
import { apiKeyRepository } from '@/lib/db/repository';

export async function POST(request: NextRequest) {
  // Validate API key
  const apiKey = request.headers.get('Authorization')?.replace('Bearer ', '');
  const keyData = await apiKeyRepository.validateKey(apiKey);
  
  if (!keyData) {
    return NextResponse.json({ error: 'Invalid API key' }, { status: 401 });
  }
  
  // Check rate limits
  const rateLimitOk = await checkRateLimit(keyData.id);
  if (!rateLimitOk) {
    return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
  }
  
  // Process request
  // ...
}
```

### 12. Deep Research System Rules

#### Deep Research Architecture
- **Main Processor**: `DeepResearchProcessor` class in `lib/llm/deepresearch.ts`
- **API Endpoints**: Modular endpoints in `app/api/deepresearch/`
- **UI Component**: `DeepResearchDisplay` in `components/chat/deep-research-display.tsx`
- **Streaming Support**: Real-time progress updates via Server-Sent Events
- **Language Detection**: Automatic language detection with same-language responses

#### Core Deep Research Components

##### 1. DeepResearchProcessor (`lib/llm/deepresearch.ts`)
- **Purpose**: Main processing engine for deep research functionality
- **Methods**:
  - `performDeepResearch()`: Full research pipeline with streaming
  - `generateSubQuestionsStep()`: Sub-question generation
  - `analyzeQueryStep()`: Initial query analysis
  - `analyzeSubQuestionStep()`: Individual sub-question analysis
  - `synthesizeStep()`: Analysis synthesis
  - `generateFinalAnswerStep()`: Final answer generation
- **Configuration**: Configurable via `DeepResearchConfig` interface
- **Streaming**: Built-in streaming support with progress callbacks

```typescript
// Deep Research usage example
const processor = new DeepResearchProcessor(llmClient, {
  maxSteps: 5,
  analysisDepth: 'intermediate',
  language: 'ko'
});

// Execute full deep research with streaming
const result = await processor.performDeepResearch(
  query,
  context,
  undefined,
  (content, stepType, stepInfo) => {
    // Handle streaming updates
    console.log('Step update:', { content, stepType, stepInfo });
  }
);
```

##### 2. Deep Research API Endpoints (`app/api/deepresearch/`)
- **Main Endpoint**: `POST /api/deepresearch` - Full research pipeline
- **Sub-endpoints**: Modular endpoints for each research phase
  - `POST /api/deepresearch/subquestions` - Generate sub-questions
  - `POST /api/deepresearch/query-analysis` - Initial query analysis
  - `POST /api/deepresearch/subquestion-analysis` - Sub-question analysis
  - `POST /api/deepresearch/synthesis` - Analysis synthesis
  - `POST /api/deepresearch/final-answer` - Final answer generation
- **Authentication**: NextAuth session validation required
- **Duplicate Prevention**: Request deduplication via active request tracking
- **Error Handling**: Comprehensive error handling with proper HTTP status codes

```typescript
// API endpoint structure example
export async function POST(request: NextRequest) {
  try {
    // Authentication check
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'User authentication required' }, { status: 401 });
    }

    // Input validation
    const { query, modelId, context } = await request.json();
    if (!query?.trim() || !modelId) {
      return NextResponse.json({ error: 'Query and modelId are required' }, { status: 400 });
    }

    // Processing logic
    // ...
  } catch (error) {
    console.error('Deep research error:', error);
    return NextResponse.json({ error: 'Processing failed' }, { status: 500 });
  }
}
```

##### 3. DeepResearchDisplay Component (`components/chat/deep-research-display.tsx`)
- **Purpose**: Interactive UI for displaying deep research progress and results
- **Features**:
  - Collapsible step display with status indicators
  - Real-time progress tracking with animated loading states
  - Step-by-step content visualization
  - Final answer display with markdown formatting
  - Responsive design with mobile optimization
- **State Management**: Complex state management for step tracking and content updates
- **Internationalization**: Full i18n support with translation keys

```typescript
// DeepResearchDisplay usage example
<DeepResearchDisplay
  messageId={messageId}
  content={content}
  isStreaming={isStreaming}
  deepResearchStepType={stepType}
  isDeepResearchComplete={isComplete}
  deepResearchStepInfo={{
    title: 'Current Step Title',
    isComplete: false,
    plannedSteps: plannedSteps,
    // Additional step information
  }}
/>
```

#### Deep Research Development Rules

##### 1. Processing Logic Rules
- **Step Structure**: Follow the established 5-step process (sub-questions → analysis → sub-analysis → synthesis → final answer)
- **Language Consistency**: Maintain same language throughout the research process
- **Error Handling**: Implement graceful fallbacks for each processing step
- **Content Parsing**: Use structured content parsing with `[Analysis Start]` markers
- **Progress Tracking**: Provide real-time progress updates via streaming

##### 2. API Design Rules
- **Authentication**: All endpoints require valid NextAuth session
- **Input Validation**: Comprehensive validation for query, modelId, and additional parameters
- **Response Format**: Consistent JSON response structure with success/error indicators
- **Streaming Support**: Use Server-Sent Events for real-time updates
- **Rate Limiting**: Prevent duplicate requests via request tracking

##### 3. UI Component Rules
- **State Management**: Use React hooks for complex state management
- **Performance**: Implement memoization and efficient re-rendering
- **Accessibility**: Ensure proper ARIA labels and keyboard navigation
- **Responsive Design**: Mobile-first approach with adaptive layouts
- **Loading States**: Provide clear visual feedback for all processing states

##### 4. Integration Rules
- **Chat Integration**: Seamless integration with existing chat interface
- **Agent Support**: Support for agent-specific deep research capabilities
- **Model Compatibility**: Work with all supported LLM providers (OpenAI, Gemini, Ollama, vLLM)
- **I18n Support**: Full internationalization with Korean/English support
- **Database Integration**: Proper integration with existing database schema

#### Deep Research Data Structures

##### DeepResearchStep Interface
```typescript
interface DeepResearchStep {
  id: string;
  title: string;
  question: string;
  analysis: string;
  sources?: string[];
  confidence: number;
}
```

##### DeepResearchConfig Interface
```typescript
interface DeepResearchConfig {
  maxSteps: number;
  confidenceThreshold: number;
  analysisDepth: 'basic' | 'intermediate' | 'advanced';
  includeSourceCitations: boolean;
  language: 'ko' | 'en';
}
```

##### DeepResearchDisplayProps Interface
```typescript
interface DeepResearchDisplayProps {
  messageId?: string;
  content: string;
  isStreaming?: boolean;
  deepResearchStepType?: 'step' | 'synthesis' | 'final';
  isDeepResearchComplete?: boolean;
  deepResearchStepInfo?: {
    title?: string;
    isComplete?: boolean;
    totalSteps?: number;
    plannedSteps?: Array<{ title: string, type: string }>;
    currentStepContent?: string;
    currentStepType?: string;
    [key: string]: any; // For parallel processing results
  };
}
```

#### Performance Optimization Rules
- **Parallel Processing**: Support for concurrent sub-question analysis
- **Streaming Optimization**: Efficient streaming with minimal bandwidth usage
- **Component Memoization**: Use React.memo and useMemo for optimal performance
- **State Optimization**: Minimize unnecessary state updates and re-renders
- **Content Parsing**: Efficient content parsing with minimal computational overhead

### 13. Error Handling
- Use try-catch blocks
- User-friendly error messages
- Utilize logging system
- Notifications via Sonner toast
- Authentication error handling with proper redirects

### 13. Performance Optimization
- Use dynamic imports
- Image optimization (next/image)
- Appropriate memoization
- Bundle size optimization

## Project Structure Rules

### 1. Directory Structure
```
app/                    # Next.js App Router
├── auth/              # Authentication pages (login/register)
├── admin/             # Admin panel (subdirectories by feature)
│   ├── general/       # General settings
│   ├── connection/    # API connections
│   ├── model/         # Model management
│   ├── agent/         # Agent management
│   ├── api/           # API management
│   ├── mcp/           # MCP integration
│   ├── evaluation/    # Model evaluation
│   ├── documents/     # Document management
│   ├── websearch/     # Web search settings
│   ├── image/         # Image generation
│   ├── audio/         # Audio processing
│   ├── pipeline/      # AI pipelines
│   └── database/      # Database settings
├── api/               # API routes (RESTful structure)
│   ├── auth/          # NextAuth API routes ([...nextauth]/route.ts)
│   ├── agents/        # Agent management API
│   ├── api-management/ # API management API
│   ├── llm-servers/   # LLM server management API
│   ├── llm-models/    # LLM model management API
│   ├── chat/          # Chat API with streaming
│   ├── deepresearch/  # Deep Research API endpoints
│   │   ├── query-analysis/     # Initial query analysis endpoint
│   │   ├── subquestions/       # Sub-question generation endpoint
│   │   ├── subquestion-analysis/ # Individual sub-question analysis
│   │   ├── synthesis/          # Analysis synthesis endpoint
│   │   └── final-answer/       # Final answer generation endpoint
│   └── profile/       # User profile API
├── chat/              # Chat interface
├── book/              # Content pages
├── setting/           # User settings
└── [other pages]/

components/            # Reusable components
├── admin/             # Admin-specific components
├── chat/              # Chat-related components
│   ├── deep-research-display.tsx # Deep Research display component with step visualization
├── contents/          # Page content components
├── layout/            # Layout components
│   ├── global-layout.tsx # Global layout wrapper
│   ├── navbar.tsx     # Navigation bar
│   └── sidebar.tsx    # Main sidebar
├── providers/         # Context providers
│   ├── client-providers.tsx # Client-side provider hierarchy
│   ├── branding-provider.tsx # Branding and app name management
│   ├── language-provider.tsx # Internationalization
│   └── model-provider.tsx # Model selection state
├── sidebar/           # Sidebar components
└── ui/                # Base UI components (Radix UI based)

lib/                   # Utilities and configuration
├── auth.ts            # Authentication utilities (hashing, verification)
├── db/                # Database-related (schema, repository)
│   ├── schema.ts      # Database schema definitions
│   ├── repository.ts  # Repository pattern implementation
│   ├── migrations/    # Migration files
│   ├── config.ts      # Database configuration
│   └── server.ts      # Server-side database utilities
├── llm/               # LLM integration (factory, providers)
│   ├── factory.ts     # LLM factory pattern
│   ├── base.ts        # Base LLM class
│   ├── openai.ts      # OpenAI integration
│   ├── gemini.ts      # Gemini integration
│   ├── ollama.ts      # Ollama integration
│   ├── vllm.ts        # vLLM integration
│   └── deepresearch.ts # Deep Research processing logic and utilities
├── i18n.ts            # Client-side internationalization
└── i18n-server.ts     # Server-side internationalization

hooks/                 # Custom React hooks
i18n/                  # Internationalization translation files
├── eng/               # English translations
└── kor/               # Korean translations
scripts/               # Utility scripts (migrations, etc.)
```

### 2. Component Organization Rules
- **Page Components**: `page.tsx` in `app/` directory
- **Layout Components**: `components/layout/`
- **Feature Components**: `components/{feature}/`
- **UI Components**: `components/ui/` (Radix UI wrappers)
- **Form Components**: `-form.tsx` suffix within feature directories

### 3. API Route Rules
- **RESTful Structure**: `app/api/{resource}/route.ts`
- **Dynamic Routes**: `app/api/{resource}/[id]/route.ts`
- **HTTP Methods**: Appropriate use of GET, POST, PUT, DELETE
- **Error Responses**: Consistent error response structure

```typescript
// API route example
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    // Business logic
    return NextResponse.json({ data: result });
  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json({ error: 'Processing failed' }, { status: 500 });
  }
}
```

### 4. Provider Hierarchy Structure
```typescript
// ClientProviders hierarchy
<BrandingProvider>
  <LanguageProvider>
    <ModelProvider>
      {children}
      <Toaster />
    </ModelProvider>
  </LanguageProvider>
</BrandingProvider>
```

### 5. Branding Provider Rules
- **Dynamic Branding**: App name, logo, and favicon can be dynamically updated
- **Database Integration**: Branding settings fetched from database and localStorage
- **Document Updates**: Automatically updates document title and meta tags
- **Fallback Handling**: Graceful fallback to default values when API calls fail
- **Client-side Persistence**: Settings cached in localStorage for performance

```typescript
// Branding provider usage
const { branding, updateBranding } = useBranding()

// Update app name dynamically
updateBranding({ appName: 'My Custom App' })

// Access branding settings
const appName = branding.appName // 'My Custom App'
const logoUrl = branding.logoUrl // '/images/logo.svg'
```

### 5. Custom Hook Rules
- **File Naming**: `use-{feature}.ts`
- **DB Hook**: Database state management via `use-db.ts`
- **Mobile Detection**: Responsive handling via `use-mobile.tsx`
- **Toast**: Notification management via `use-toast.ts`

### 6. Layout Architecture Rules
- **Global Layout**: `components/layout/global-layout.tsx` handles route-based layout switching
- **Route-Based Layouts**: Different layouts for auth, admin, and regular pages
- **Responsive Design**: Mobile-first approach with collapsible sidebar
- **Layout Hierarchy**: Root layout → Global layout → Page-specific layouts
- **State Management**: Layout state managed via React context and local state

```typescript
// Global layout structure
const GlobalLayout = ({ children }: { children: React.ReactNode }) => {
  const pathname = usePathname()
  const isAuthPage = pathname?.startsWith('/auth')
  const isAdminPage = pathname?.startsWith('/admin')
  
  // Public pages (no sidebar)
  if (isAuthPage || pathname === '/') {
    return <>{children}</>
  }
  
  // Admin pages (admin sidebar)
  if (isAdminPage) {
    return (
      <div className="flex h-screen">
        <Navbar />
        <div className="flex-1">{children}</div>
      </div>
    )
  }
  
  // Regular pages (main sidebar)
  return (
    <div className="flex h-screen">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Navbar />
        <div className="flex-1">{children}</div>
      </div>
    </div>
  )
}
```

## Feature-Specific Rules

### 1. Admin Panel (`app/admin/`)
- **Settings Forms**: React Hook Form + Zod validation
- **Real-time Updates**: Immediate reflection of setting changes
- **Permission Management**: Admin permission verification logic
- **Modular Separation**: Subdirectory structure by feature

### 2. Chat Interface (`app/chat/`, `components/chat/`)
- **Streaming**: Real-time AI response streaming with abort functionality
- **Message Management**: Chat history storage and management with auto-title generation
- **Anonymous Users**: Default anonymous user system
- **Responsive**: Mobile optimization required
- **Performance**: Memoized components with React.memo for message rendering
- **Scroll Optimization**: Smooth scrolling with scroll-behavior and performance optimizations
- **Loading States**: Enhanced loading indicators with skeleton UI
- **Message Optimization**: Content-visibility and contain CSS properties for long conversations
- **Deep Research Integration**: Seamless integration with deep research functionality

```typescript
// Optimized message component with memoization
const MessageWrapper = memo(({ message, ...props }) => {
  return (
    <div className="message-item">
      {message.role === "assistant" && <LlmResponse {...props} />}
      {message.role === "user" && <UserRequest {...props} />}
    </div>
  )
}, (prevProps, nextProps) => {
  // Custom comparison logic for optimal re-rendering
  return prevProps.message.content === nextProps.message.content &&
         prevProps.streamingMessageId !== nextProps.message.id
})

// CSS optimizations for message container
.messages-container {
  scroll-behavior: smooth;
  contain: layout style;
  content-visibility: auto;
  contain-intrinsic-size: 0 1000px;
}
```

### 3. Deep Research System (`app/api/deepresearch/`, `components/chat/deep-research-display.tsx`)
- **Modular Architecture**: Separate API endpoints for each research phase
- **Streaming Support**: Real-time progress updates via Server-Sent Events
- **State Management**: Complex state management with React hooks for step tracking
- **Language Consistency**: Maintain same language throughout research process
- **Error Handling**: Comprehensive error handling with graceful fallbacks
- **Performance**: Efficient parallel processing and component memoization
- **UI/UX**: Interactive step visualization with collapsible content and status indicators

### 4. Agent Management (`app/admin/agent/`)
- **Image Upload**: Multipart form data handling
- **Model Connection**: LLM model and agent connection
- **Profile Management**: Agent metadata management
- **Deep Research Support**: Agent-specific deep research capabilities

### 5. API Management (`app/admin/api/`)
- **OpenAI Compatibility**: OpenAI API compatible endpoints
- **Rate Limiting**: Request rate limiting implementation
- **Usage Tracking**: API usage analytics and monitoring
- **Key Management**: API key generation and validation

### 6. Database Schema
- **Multi-DB**: Simultaneous SQLite/PostgreSQL support
- **Repository**: Data access layer separation
- **Migration**: Schema updates via `npm run db:migrate`

## Development Environment Setup

### Next.js Configuration (`next.config.mjs`)
- **Build Optimization**: Ignore ESLint/TypeScript errors (during build)
- **File Watching**: Polling-based file watching (3-second interval)
- **Caching**: Disable caching in development mode
- **External Packages**: Server component external package settings for `drizzle-orm`

### Environment Variable Management
- **DB Settings**: `DB_TYPE`, `DATABASE_URL`
- **API Keys**: `OPENAI_API_KEY`, `GOOGLE_API_KEY`, etc.
- **JWT**: Token secret management

## Security Considerations
- **Authentication**: NextAuth JWT-based authentication with secure session management
- **Password Security**: PBKDF2 hashing with 10,000 iterations and random salt
- **Route Protection**: Middleware-based authentication for all protected routes
- **Session Management**: 24-hour session expiry with automatic token refresh
- **Admin Access**: Role-based access control for admin features
- **Server-only**: `'server-only'` import for server-exclusive modules
- **API Keys**: Secure key management via environment variables
- **File Upload**: File type and size validation
- **SQL Safety**: SQL injection prevention via Drizzle ORM
- **Environment Variables**: Secure storage of NEXTAUTH_SECRET and database credentials

## Performance Optimization
- **Dynamic Imports**: Page-specific code splitting
- **Translation Caching**: Performance improvement via i18n module caching
- **Image Optimization**: Use Next.js Image component
- **Suspense**: Asynchronous component loading optimization
- **Deep Research Optimization**: Parallel processing and efficient streaming for research tasks

### 14. API Management Rules
- **API Configuration**: Global API settings via `apiManagementRepository`
- **API Key Management**: Secure key generation with `generateApiKey()` function
- **Rate Limiting**: Tiered rate limiting system ('basic', 'premium', 'unlimited')
- **Usage Tracking**: Comprehensive API usage analytics
- **OpenAI Compatibility**: OpenAI-compatible API endpoints
- **CORS Control**: Configurable CORS settings for cross-origin requests
- **Authentication**: Optional authentication requirements for API endpoints

```typescript
// API management usage example
// Get API management settings
const apiSettings = await apiManagementRepository.findById();

// Create API key
const { key, keyHash, keyPrefix } = generateApiKey();
await apiKeysRepository.create({
  name: 'API Key Name',
  keyHash,
  keyPrefix,
  permissions: ['chat', 'models'],
  rateLimitTier: 'basic',
  maxRequestsPerHour: 100,
  maxRequestsPerDay: 1000
});

// Record API usage
await apiUsageRepository.create({
  apiKeyId: 'key-id',
  endpoint: '/api/v1/chat/completions',
  method: 'POST',
  statusCode: 200,
  tokensUsed: 150,
  responseTimeMs: 850
});
```

Follow these rules to write code that aligns with the KKOT WebUI project architecture.

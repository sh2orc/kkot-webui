# KKOT WebUI - Cursor Rules

## Project Overview
KKOT WebUI is a universal web interface for various LLM services (OpenAI, Gemini, Ollama, vLLM, etc.).

## Technology Stack

### Framework & Language
- **Framework**: Next.js 15.2.4 (App Router)
- **Language**: TypeScript
- **Runtime**: Node.js 18.0+

### Database & ORM
- **Database**: SQLite (development), PostgreSQL (production)
- **ORM**: Drizzle ORM with better-sqlite3
- **Migration**: Automatic migration system (scripts/migrate.ts)
- **Schema**: Multi-DB support (SQLite/PostgreSQL)

### UI & Styling
- **Styling**: Tailwind CSS with tailwind-merge
- **UI Components**: Radix UI component system
- **Icons**: Lucide React
- **Theme**: next-themes (dark/light mode)
- **Animations**: tailwindcss-animate
- **Notifications**: Sonner toast

### Forms & Validation
- **Form Management**: React Hook Form
- **Validation**: Zod schema validation
- **Resolvers**: @hookform/resolvers/zod

### AI & LLM Integration
- **LangChain**: @langchain/core, @langchain/community
- **OpenAI**: @langchain/openai
- **Google AI**: @langchain/google-genai
- **LangGraph**: @langchain/langgraph
- **Factory Pattern**: Provider management via LLMFactory

### State Management & Context
- **State Management**: React Context API
- **Providers**: BrandingProvider, LanguageProvider, ModelProvider
- **Client Providers**: Suspense-based hierarchical provider structure

### Authentication & Authorization
- **Authentication**: NextAuth.js v4 with JWT strategy
- **Session Management**: JWT-based session with 24-hour expiry
- **Password Security**: PBKDF2 with 10,000 iterations and 16-byte salt
- **Route Protection**: Custom middleware for protected routes
- **User Management**: Built-in registration/login with role-based access
- **Admin System**: First user automatically assigned admin role

### Internationalization
- **i18n**: Custom i18n system (Korean/English)
- **Translation Files**: JSON-based modular translation files
- **Dynamic Loading**: Dynamic loading and caching of translation modules
- **Context**: Global language state management via LanguageContext

## Database Structure & Backend Architecture

### Database Schema Overview
The project uses a multi-database architecture supporting both SQLite and PostgreSQL with identical schema definitions.

#### Core Tables

##### 1. Users (`users`)
- **Purpose**: User management and authentication
- **Fields**:
  - `id`: Primary key (TEXT for SQLite, SERIAL for PostgreSQL)
  - `username`: Unique username
  - `email`: User email
  - `password`: Hashed password (PBKDF2)
  - `role`: User role ('user', 'admin')
  - `createdAt`, `updatedAt`: Timestamps

##### 2. Chat Sessions (`chat_sessions`)
- **Purpose**: Chat session management
- **Fields**:
  - `id`: Primary key
  - `userId`: Foreign key to users table
  - `title`: Session title
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: 
  - One-to-many with users
  - One-to-many with chat messages

##### 3. Chat Messages (`chat_messages`)
- **Purpose**: Individual chat messages storage
- **Fields**:
  - `id`: Primary key
  - `sessionId`: Foreign key to chat_sessions
  - `role`: Message role ('user', 'assistant')
  - `content`: Message content
  - `contentType`: Content type ('text', 'multimodal')
  - `attachments`: JSON string for multimodal content
  - `createdAt`: Timestamp
- **Relationships**: Many-to-one with chat sessions

#### LLM Management Tables

##### 4. LLM Servers (`llm_servers`)
- **Purpose**: LLM server configuration and management
- **Fields**:
  - `id`: Primary key
  - `provider`: Provider type ('openai', 'gemini', 'ollama', 'vllm', 'custom')
  - `name`: Server name
  - `baseUrl`: Server URL
  - `apiKey`: API key (encrypted)
  - `models`: JSON string of available models
  - `enabled`: Boolean flag
  - `isDefault`: Default server flag
  - `settings`: JSON string for provider-specific settings
  - `createdAt`, `updatedAt`: Timestamps

##### 5. LLM Models (`llm_models`)
- **Purpose**: Individual model configuration
- **Fields**:
  - `id`: Primary key
  - `serverId`: Foreign key to llm_servers
  - `modelId`: Actual model ID (e.g., 'gpt-4')
  - `provider`: Provider type
  - `enabled`: Boolean flag
  - `isPublic`: Public availability flag
  - `capabilities`: JSON string for model capabilities
  - `contextLength`: Context window size
  - `supportsMultimodal`: Multimodal support flag
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: Many-to-one with llm_servers

##### 6. Agent Management (`agent_manage`)
- **Purpose**: AI agent configuration and management
- **Fields**:
  - `id`: Primary key
  - `agentId`: Unique agent identifier
  - `modelId`: Foreign key to llm_models
  - `name`: Agent name
  - `systemPrompt`: System prompt
  - `temperature`: Temperature setting
  - `topK`, `topP`: Sampling parameters
  - `maxTokens`: Maximum tokens
  - `presencePenalty`, `frequencyPenalty`: Penalty settings
  - `imageData`: Binary image data (BLOB)
  - `description`: Agent description
  - `enabled`: Boolean flag
  - `parameterEnabled`: Parameter customization flag
  - `supportsMultimodal`: Multimodal support flag
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: Many-to-one with llm_models

#### API Management Tables

##### 7. API Management (`api_management`)
- **Purpose**: Global API service configuration
- **Fields**:
  - `id`: Primary key (typically 'default')
  - `apiEnabled`: API service enabled flag
  - `corsEnabled`: CORS enabled flag
  - `corsOrigins`: CORS origins configuration
  - `rateLimitEnabled`: Rate limiting enabled flag
  - `rateLimitRequests`: Rate limit requests count
  - `rateLimitWindow`: Rate limit window (seconds)
  - `requireAuth`: Authentication requirement flag
  - `openaiCompatible`: OpenAI API compatibility flag
  - `createdAt`, `updatedAt`: Timestamps

##### 8. API Keys (`api_keys`)
- **Purpose**: API key management for external access
- **Fields**:
  - `id`: Primary key
  - `name`: Key name
  - `keyHash`: Hashed API key
  - `keyPrefix`: Key prefix for display
  - `userId`: Foreign key to users (optional)
  - `permissions`: JSON array of permissions
  - `rateLimitTier`: Rate limit tier ('basic', 'premium', 'unlimited')
  - `maxRequestsPerHour`, `maxRequestsPerDay`: Rate limits
  - `expiresAt`: Expiration timestamp
  - `lastUsedAt`: Last usage timestamp
  - `isActive`: Active flag
  - `createdAt`, `updatedAt`: Timestamps
- **Relationships**: Many-to-one with users (optional)

##### 9. API Usage (`api_usage`)
- **Purpose**: API usage tracking and analytics
- **Fields**:
  - `id`: Primary key
  - `apiKeyId`: Foreign key to api_keys
  - `endpoint`: API endpoint
  - `method`: HTTP method
  - `statusCode`: Response status code
  - `tokensUsed`: Tokens consumed
  - `responseTimeMs`: Response time
  - `errorMessage`: Error message (if any)
  - `ipAddress`: Client IP address
  - `userAgent`: Client user agent
  - `createdAt`: Timestamp
- **Relationships**: Many-to-one with api_keys

#### Settings Tables

##### 10. System Settings (`system_settings`)
- **Purpose**: Global system configuration
- **Fields**:
  - `id`: Primary key
  - `key`: Setting key
  - `value`: Setting value (JSON string)
  - `updatedAt`: Timestamp

##### 11. Service Settings Tables
- **Web Search Settings (`web_search_settings`)**: SearchXNG, Google, Bing configuration
- **Image Settings (`image_settings`)**: OpenAI, Stability AI, local image generation
- **Audio Settings (`audio_settings`)**: OpenAI, ElevenLabs, local audio processing

### Repository Pattern Implementation

#### Repository Structure (`lib/db/repository.ts`)
- **Purpose**: Data access layer abstraction
- **Pattern**: Repository pattern with transaction support
- **Functions**:
  - `userRepository`: User CRUD operations
  - `chatSessionRepository`: Chat session management
  - `chatMessageRepository`: Message operations with cascade delete
  - `apiConnectionRepository`: API connection management
  - `llmServerRepository`: LLM server operations
  - `agentRepository`: Agent management
  - `apiManagementRepository`: API management operations

#### Key Repository Features
- **Type Safety**: Leverages Drizzle ORM type inference
- **Transaction Support**: Atomic operations for complex changes
- **Cascade Operations**: Proper foreign key relationships
- **ID Generation**: Custom ID generation for consistent formatting
- **Multi-DB Support**: Handles both SQLite and PostgreSQL

### Migration System

#### Migration Files (`lib/db/migrations/`)
- **0000_initial.sql**: Base schema creation
- **0001_llm_servers.sql**: LLM server management
- **0002_llm_models.sql**: LLM model configuration
- **0003_agent_manage.sql**: Agent management system
- **0004_api_management.sql**: API management and usage tracking

#### Migration Process
- **Automatic**: Runs on application startup
- **Version Control**: Tracks applied migrations
- **Rollback**: Supports rollback functionality
- **Multi-DB**: Handles both SQLite and PostgreSQL schemas

## Coding Rules

### 1. File Structure and Naming Conventions
- **Components**: PascalCase (e.g., `ChatInput.tsx`)
- **Pages**: kebab-case (e.g., `agent-management-form.tsx`)
- **Hooks**: camelCase with `use` prefix (e.g., `useDatabase.ts`)
- **Utilities**: camelCase (e.g., `utils.ts`)
- **API Routes**: RESTful structure (`route.ts`)

### 2. Component Writing Rules
- Use React functional components
- Set `displayName` when using `forwardRef`
- Define props types as interfaces
- Use default exports

```typescript
interface ComponentProps {
  title: string;
  children?: React.ReactNode;
}

const Component = ({ title, children }: ComponentProps) => {
  return <div>{title}</div>;
};

export default Component;
```

### 3. Styling Rules
- Use Tailwind CSS classes
- Apply conditional classes with `cn()` function
- Define variants using `class-variance-authority`
- Consider responsive design (mobile-first)

### 4. Database Rules
- **Schema Definition**: Multi-DB support for SQLite/PostgreSQL in `lib/db/schema.ts`
- **Repository Pattern**: Data access layer in `lib/db/repository.ts`
- **Server-only**: Ensure server-side only with `'server-only'` import
- **Migration**: Schema change management via `scripts/migrate.ts`
- **Type Safety**: Leverage Drizzle ORM type inference
- **Transactions**: Use transactions for complex data changes

```typescript
// Schema definition example
export const users = getDbType() === 'sqlite' 
  ? sqliteTable('users', { /* SQLite schema */ })
  : pgTable('users', { /* PostgreSQL schema */ });
```

### 5. API Route Rules
- RESTful API design
- Use appropriate HTTP status codes
- Implement error handling
- Type-safe response structure

```typescript
// app/api/example/route.ts
export async function GET() {
  try {
    // Logic implementation
    return Response.json({ data: result });
  } catch (error) {
    return Response.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
```

### 6. Form Handling Rules
- Use React Hook Form + Zod combination
- Schema-based validation
- Internationalized error messages

```typescript
const schema = z.object({
  name: z.string().min(1, 'Name is required'),
});

const form = useForm<z.infer<typeof schema>>({
  resolver: zodResolver(schema),
});
```

### 7. Internationalization Rules
- **Translation Files**: `i18n/{language}/{module}.json` structure
- **Dynamic Loading**: Load on-demand via `loadTranslationModule()`
- **Caching**: Performance optimization with `translationCache`
- **Hook Usage**: Component-specific translations via `useTranslation(module)`
- **Key Structure**: Hierarchical translation keys with dot notation (e.g., `admin.general.title`)
- **Translation Modules**: All translation modules must be defined in `components/providers/language-provider.tsx` in the `translationModules` array when adding new i18n modules

```typescript
// Translation usage example
const { t, lang } = useTranslation('admin.general');
const title = await t('settings.title'); // Async
const label = lang('form.label'); // Sync (when cached)
```

### 8. Authentication Rules
- **NextAuth Configuration**: JWT strategy with custom credential provider
- **Password Hashing**: Use `hashPassword()` and `verifyPassword()` from `lib/auth.ts`
- **Route Protection**: Protected routes via middleware configuration
- **Session Handling**: 24-hour session expiry with automatic renewal
- **Error Handling**: Proper error messages for auth failures
- **Admin Check**: First user registration automatically gets admin role

```typescript
// Authentication usage example
import { hashPassword, verifyPassword } from '@/lib/auth'

// Password hashing
const hashedPassword = hashPassword(plainPassword)

// Password verification
const isValid = verifyPassword(plainPassword, hashedPassword)

// NextAuth session access
const { data: session, status } = useSession()
```

### 9. LLM Integration Rules
- **Factory Pattern**: Create provider instances via `LLMFactory.create(config)`
- **Base Class**: Provider-specific implementations inheriting from `BaseLLM`
- **Config Management**: Standardized configuration via `LLMModelConfig` type
- **Streaming**: Real-time response streaming support
- **Error Handling**: Provider-specific error handling and fallback

```typescript
// LLM usage example
const llm = LLMFactory.create({
  provider: 'openai',
  modelName: 'gpt-4',
  apiKey: process.env.OPENAI_API_KEY
});
```

### 10. Middleware Rules
- **Route Protection**: Configure protected routes in `config.matcher`
- **Authentication Check**: Verify NextAuth session tokens
- **API Response**: Return 401 for unauthorized API requests
- **Redirect Logic**: Redirect unauthenticated users to `/auth`
- **Public Routes**: Allow access to `/auth` and static assets

```typescript
// Middleware configuration example
export const config = {
  matcher: [
    '/api/agents/:path*',
    '/admin/:path*',
    '/chat/:path*',
    '/',
  ],
};
```

### 11. Backend Development Rules

#### Database Operations
- **Repository Usage**: Always use repository pattern for data access
- **Transaction Handling**: Use transactions for multi-table operations
- **Error Handling**: Proper error catching and logging
- **Validation**: Server-side validation for all data operations
- **Image Data**: Image data should be stored in the database as Base64 encoding instead of BLOB. When reading images from the database, use Buffer.from(agent.imageData).toString() to convert to Base64 string, then add the data:image/png;base64, prefix to convert to image URL format.

```typescript
// Database operation example
import { userRepository } from '@/lib/db/repository';

// Create user with proper error handling
try {
  const user = await userRepository.create({
    username: 'Taeyoung',
    email: 'sh2orc@gmail.com',
    password: hashedPassword,
    role: 'user'
  });
} catch (error) {
  console.error('User creation failed:', error);
  throw new Error('Failed to create user');
}
```

#### API Development
- **OpenAPI Compatible**: Follow OpenAI API compatibility standards
- **Rate Limiting**: Implement rate limiting for API endpoints
- **API Key Management**: Secure API key handling and validation
- **Usage Tracking**: Track API usage for analytics and billing

```typescript
// API endpoint with rate limiting
import { apiKeyRepository } from '@/lib/db/repository';

export async function POST(request: NextRequest) {
  // Validate API key
  const apiKey = request.headers.get('Authorization')?.replace('Bearer ', '');
  const keyData = await apiKeyRepository.validateKey(apiKey);
  
  if (!keyData) {
    return NextResponse.json({ error: 'Invalid API key' }, { status: 401 });
  }
  
  // Check rate limits
  const rateLimitOk = await checkRateLimit(keyData.id);
  if (!rateLimitOk) {
    return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
  }
  
  // Process request
  // ...
}
```

### 12. Error Handling
- Use try-catch blocks
- User-friendly error messages
- Utilize logging system
- Notifications via Sonner toast
- Authentication error handling with proper redirects

### 13. Performance Optimization
- Use dynamic imports
- Image optimization (next/image)
- Appropriate memoization
- Bundle size optimization

## Project Structure Rules

### 1. Directory Structure
```
app/                    # Next.js App Router
├── auth/              # Authentication pages (login/register)
├── admin/             # Admin panel (subdirectories by feature)
│   ├── general/       # General settings
│   ├── connection/    # API connections
│   ├── model/         # Model management
│   ├── agent/         # Agent management
│   ├── api/           # API management
│   ├── mcp/           # MCP integration
│   ├── evaluation/    # Model evaluation
│   ├── documents/     # Document management
│   ├── websearch/     # Web search settings
│   ├── image/         # Image generation
│   ├── audio/         # Audio processing
│   ├── pipeline/      # AI pipelines
│   └── database/      # Database settings
├── api/               # API routes (RESTful structure)
│   ├── auth/          # NextAuth API routes ([...nextauth]/route.ts)
│   ├── agents/        # Agent management API
│   ├── api-management/ # API management API
│   ├── llm-servers/   # LLM server management API
│   ├── llm-models/    # LLM model management API
│   ├── chat/          # Chat API with streaming
│   └── profile/       # User profile API
├── chat/              # Chat interface
└── [other pages]/

components/            # Reusable components
├── admin/             # Admin-specific components
├── chat/              # Chat-related components
├── contents/          # Page content components
├── layout/            # Layout components
├── providers/         # Context providers
├── sidebar/           # Sidebar components
└── ui/                # Base UI components (Radix UI based)

lib/                   # Utilities and configuration
├── auth.ts            # Authentication utilities (hashing, verification)
├── db/                # Database-related (schema, repository)
│   ├── schema.ts      # Database schema definitions
│   ├── repository.ts  # Repository pattern implementation
│   ├── migrations/    # Migration files
│   ├── config.ts      # Database configuration
│   └── server.ts      # Server-side database utilities
├── llm/               # LLM integration (factory, providers)
│   ├── factory.ts     # LLM factory pattern
│   ├── base.ts        # Base LLM class
│   ├── openai.ts      # OpenAI integration
│   ├── gemini.ts      # Gemini integration
│   ├── ollama.ts      # Ollama integration
│   └── vllm.ts        # vLLM integration
└── [other utilities]/

hooks/                 # Custom React hooks
i18n/                  # Internationalization translation files
scripts/               # Utility scripts (migrations, etc.)
```

### 2. Component Organization Rules
- **Page Components**: `page.tsx` in `app/` directory
- **Layout Components**: `components/layout/`
- **Feature Components**: `components/{feature}/`
- **UI Components**: `components/ui/` (Radix UI wrappers)
- **Form Components**: `-form.tsx` suffix within feature directories

### 3. API Route Rules
- **RESTful Structure**: `app/api/{resource}/route.ts`
- **Dynamic Routes**: `app/api/{resource}/[id]/route.ts`
- **HTTP Methods**: Appropriate use of GET, POST, PUT, DELETE
- **Error Responses**: Consistent error response structure

```typescript
// API route example
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    // Business logic
    return NextResponse.json({ data: result });
  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json({ error: 'Processing failed' }, { status: 500 });
  }
}
```

### 4. Provider Hierarchy Structure
```typescript
// ClientProviders hierarchy
<BrandingProvider>
  <LanguageProvider>
    <ModelProvider>
      {children}
      <Toaster />
    </ModelProvider>
  </LanguageProvider>
</BrandingProvider>
```

### 5. Custom Hook Rules
- **File Naming**: `use-{feature}.ts`
- **DB Hook**: Database state management via `use-db.ts`
- **Mobile Detection**: Responsive handling via `use-mobile.tsx`
- **Toast**: Notification management via `use-toast.ts`

## Feature-Specific Rules

### 1. Admin Panel (`app/admin/`)
- **Settings Forms**: React Hook Form + Zod validation
- **Real-time Updates**: Immediate reflection of setting changes
- **Permission Management**: Admin permission verification logic
- **Modular Separation**: Subdirectory structure by feature

### 2. Chat Interface (`app/chat/`, `components/chat/`)
- **Streaming**: Real-time AI response streaming
- **Message Management**: Chat history storage and management
- **Anonymous Users**: Default anonymous user system
- **Responsive**: Mobile optimization required

### 3. Agent Management (`app/admin/agent/`)
- **Image Upload**: Multipart form data handling
- **Model Connection**: LLM model and agent connection
- **Profile Management**: Agent metadata management

### 4. API Management (`app/admin/api/`)
- **OpenAI Compatibility**: OpenAI API compatible endpoints
- **Rate Limiting**: Request rate limiting implementation
- **Usage Tracking**: API usage analytics and monitoring
- **Key Management**: API key generation and validation

### 5. Database Schema
- **Multi-DB**: Simultaneous SQLite/PostgreSQL support
- **Repository**: Data access layer separation
- **Migration**: Schema updates via `npm run db:migrate`

## Development Environment Setup

### Next.js Configuration (`next.config.mjs`)
- **Build Optimization**: Ignore ESLint/TypeScript errors (during build)
- **File Watching**: Polling-based file watching (3-second interval)
- **Caching**: Disable caching in development mode
- **External Packages**: Server component external package settings for  `drizzle-orm`

### Environment Variable Management
- **DB Settings**: `DB_TYPE`, `DATABASE_URL`
- **API Keys**: `OPENAI_API_KEY`, `GOOGLE_API_KEY`, etc.
- **JWT**: Token secret management

## Security Considerations
- **Authentication**: NextAuth JWT-based authentication with secure session management
- **Password Security**: PBKDF2 hashing with 10,000 iterations and random salt
- **Route Protection**: Middleware-based authentication for all protected routes
- **Session Management**: 24-hour session expiry with automatic token refresh
- **Admin Access**: Role-based access control for admin features
- **Server-only**: `'server-only'` import for server-exclusive modules
- **API Keys**: Secure key management via environment variables
- **File Upload**: File type and size validation
- **SQL Safety**: SQL injection prevention via Drizzle ORM
- **Environment Variables**: Secure storage of NEXTAUTH_SECRET and database credentials

## Performance Optimization
- **Dynamic Imports**: Page-specific code splitting
- **Translation Caching**: Performance improvement via i18n module caching
- **Image Optimization**: Use Next.js Image component
- **Suspense**: Asynchronous component loading optimization

### 9. API Management Rules
- **API Configuration**: Global API settings via `apiManagementRepository`
- **API Key Management**: Secure key generation with `generateApiKey()` function
- **Rate Limiting**: Tiered rate limiting system ('basic', 'premium', 'unlimited')
- **Usage Tracking**: Comprehensive API usage analytics
- **OpenAI Compatibility**: OpenAI-compatible API endpoints
- **CORS Control**: Configurable CORS settings for cross-origin requests
- **Authentication**: Optional authentication requirements for API endpoints

```typescript
// API management usage example
// Get API management settings
const apiSettings = await apiManagementRepository.findById();

// Create API key
const { key, keyHash, keyPrefix } = generateApiKey();
await apiKeysRepository.create({
  name: 'API Key Name',
  keyHash,
  keyPrefix,
  permissions: ['chat', 'models'],
  rateLimitTier: 'basic',
  maxRequestsPerHour: 100,
  maxRequestsPerDay: 1000
});

// Record API usage
await apiUsageRepository.create({
  apiKeyId: 'key-id',
  endpoint: '/api/v1/chat/completions',
  method: 'POST',
  statusCode: 200,
  tokensUsed: 150,
  responseTimeMs: 850
});
```

Follow these rules to write code that aligns with the KKOT WebUI project architecture. 
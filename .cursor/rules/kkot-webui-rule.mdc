---
description: 
globs: 
alwaysApply: false
---
# KKOT WebUI - Cursor Rules

## Project Overview
KKOT WebUI is a universal web interface for various LLM services (OpenAI, Gemini, Ollama, vLLM, etc.).

## Technology Stack

### Framework & Language
- **Framework**: Next.js 15.2.4 (App Router)
- **Language**: TypeScript
- **Runtime**: Node.js 18.0+

### Database & ORM
- **Database**: SQLite (development), PostgreSQL (production)
- **ORM**: Drizzle ORM with better-sqlite3
- **Migration**: Automatic migration system (scripts/migrate.ts)
- **Schema**: Multi-DB support (SQLite/PostgreSQL)

### UI & Styling
- **Styling**: Tailwind CSS with tailwind-merge
- **UI Components**: Radix UI component system
- **Icons**: Lucide React
- **Theme**: next-themes (dark/light mode)
- **Animations**: tailwindcss-animate
- **Notifications**: Sonner toast

### Forms & Validation
- **Form Management**: React Hook Form
- **Validation**: Zod schema validation
- **Resolvers**: @hookform/resolvers/zod

### AI & LLM Integration
- **LangChain**: @langchain/core, @langchain/community
- **OpenAI**: @langchain/openai
- **Google AI**: @langchain/google-genai
- **LangGraph**: @langchain/langgraph
- **Factory Pattern**: Provider management via LLMFactory

### State Management & Context
- **State Management**: React Context API
- **Providers**: BrandingProvider, LanguageProvider, ModelProvider
- **Client Providers**: Suspense-based hierarchical provider structure

### Internationalization
- **i18n**: Custom i18n system (Korean/English)
- **Translation Files**: JSON-based modular translation files
- **Dynamic Loading**: Dynamic loading and caching of translation modules
- **Context**: Global language state management via LanguageContext

## Coding Rules

### 1. File Structure and Naming Conventions
- **Components**: PascalCase (e.g., `ChatInput.tsx`)
- **Pages**: kebab-case (e.g., `agent-management-form.tsx`)
- **Hooks**: camelCase with `use` prefix (e.g., `useDatabase.ts`)
- **Utilities**: camelCase (e.g., `utils.ts`)
- **API Routes**: RESTful structure (`route.ts`)

### 2. Component Writing Rules
- Use React functional components
- Set `displayName` when using `forwardRef`
- Define props types as interfaces
- Use default exports

```typescript
interface ComponentProps {
  title: string;
  children?: React.ReactNode;
}

const Component = ({ title, children }: ComponentProps) => {
  return <div>{title}</div>;
};

export default Component;
```

### 3. Styling Rules
- Use Tailwind CSS classes
- Apply conditional classes with `cn()` function
- Define variants using `class-variance-authority`
- Consider responsive design (mobile-first)

### 4. Database Rules
- **Schema Definition**: Multi-DB support for SQLite/PostgreSQL in `lib/db/schema.ts`
- **Repository Pattern**: Data access layer in `lib/db/repository.ts`
- **Server-only**: Ensure server-side only with `'server-only'` import
- **Migration**: Schema change management via `scripts/migrate.ts`
- **Type Safety**: Leverage Drizzle ORM type inference
- **Transactions**: Use transactions for complex data changes

```typescript
// Schema definition example
export const users = getDbType() === 'sqlite' 
  ? sqliteTable('users', { /* SQLite schema */ })
  : pgTable('users', { /* PostgreSQL schema */ });
```

### 5. API Route Rules
- RESTful API design
- Use appropriate HTTP status codes
- Implement error handling
- Type-safe response structure

```typescript
// app/api/example/route.ts
export async function GET() {
  try {
    // Logic implementation
    return Response.json({ data: result });
  } catch (error) {
    return Response.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
```

### 6. Form Handling Rules
- Use React Hook Form + Zod combination
- Schema-based validation
- Internationalized error messages

```typescript
const schema = z.object({
  name: z.string().min(1, 'Name is required'),
});

const form = useForm<z.infer<typeof schema>>({
  resolver: zodResolver(schema),
});
```

### 7. Internationalization Rules
- **Translation Files**: `i18n/{language}/{module}.json` structure
- **Dynamic Loading**: Load on-demand via `loadTranslationModule()`
- **Caching**: Performance optimization with `translationCache`
- **Hook Usage**: Component-specific translations via `useTranslation(module)`
- **Key Structure**: Hierarchical translation keys with dot notation (e.g., `admin.general.title`)

```typescript
// Translation usage example
const { t, lang } = useTranslation('admin.general');
const title = await t('settings.title'); // Async
const label = lang('form.label'); // Sync (when cached)
```

### 8. LLM Integration Rules
- **Factory Pattern**: Create provider instances via `LLMFactory.create(config)`
- **Base Class**: Provider-specific implementations inheriting from `BaseLLM`
- **Config Management**: Standardized configuration via `LLMModelConfig` type
- **Streaming**: Real-time response streaming support
- **Error Handling**: Provider-specific error handling and fallback

```typescript
// LLM usage example
const llm = LLMFactory.create({
  provider: 'openai',
  modelName: 'gpt-4',
  apiKey: process.env.OPENAI_API_KEY
});
```

### 9. Error Handling
- Use try-catch blocks
- User-friendly error messages
- Utilize logging system
- Notifications via Sonner toast

### 10. Performance Optimization
- Use dynamic imports
- Image optimization (next/image)
- Appropriate memoization
- Bundle size optimization

## Project Structure Rules

### 1. Directory Structure
```
app/                    # Next.js App Router
├── admin/             # Admin panel (subdirectories by feature)
├── api/               # API routes (RESTful structure)
├── chat/              # Chat interface
└── [other pages]/

components/            # Reusable components
├── admin/             # Admin-specific components
├── chat/              # Chat-related components
├── contents/          # Page content components
├── layout/            # Layout components
├── providers/         # Context providers
├── sidebar/           # Sidebar components
└── ui/                # Base UI components (Radix UI based)

lib/                   # Utilities and configuration
├── db/                # Database-related (schema, repository)
├── llm/               # LLM integration (factory, providers)
└── [other utilities]/

hooks/                 # Custom React hooks
i18n/                  # Internationalization translation files
```

### 2. Component Organization Rules
- **Page Components**: `page.tsx` in `app/` directory
- **Layout Components**: `components/layout/`
- **Feature Components**: `components/{feature}/`
- **UI Components**: `components/ui/` (Radix UI wrappers)
- **Form Components**: `-form.tsx` suffix within feature directories

### 3. API Route Rules
- **RESTful Structure**: `app/api/{resource}/route.ts`
- **Dynamic Routes**: `app/api/{resource}/[id]/route.ts`
- **HTTP Methods**: Appropriate use of GET, POST, PUT, DELETE
- **Error Responses**: Consistent error response structure

```typescript
// API route example
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    // Business logic
    return NextResponse.json({ data: result });
  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json({ error: 'Processing failed' }, { status: 500 });
  }
}
```

### 4. Provider Hierarchy Structure
```typescript
// ClientProviders hierarchy
<BrandingProvider>
  <LanguageProvider>
    <ModelProvider>
      {children}
      <Toaster />
    </ModelProvider>
  </LanguageProvider>
</BrandingProvider>
```

### 5. Custom Hook Rules
- **File Naming**: `use-{feature}.ts`
- **DB Hook**: Database state management via `use-db.ts`
- **Mobile Detection**: Responsive handling via `use-mobile.tsx`
- **Toast**: Notification management via `use-toast.ts`

## Feature-Specific Rules

### 1. Admin Panel (`app/admin/`)
- **Settings Forms**: React Hook Form + Zod validation
- **Real-time Updates**: Immediate reflection of setting changes
- **Permission Management**: Admin permission verification logic
- **Modular Separation**: Subdirectory structure by feature

### 2. Chat Interface (`app/chat/`, `components/chat/`)
- **Streaming**: Real-time AI response streaming
- **Message Management**: Chat history storage and management
- **Anonymous Users**: Default anonymous user system
- **Responsive**: Mobile optimization required

### 3. Agent Management (`app/admin/agent/`)
- **Image Upload**: Multipart form data handling
- **Model Connection**: LLM model and agent connection
- **Profile Management**: Agent metadata management

### 4. Database Schema
- **Multi-DB**: Simultaneous SQLite/PostgreSQL support
- **Repository**: Data access layer separation
- **Migration**: Schema updates via `npm run db:migrate`

## Development Environment Setup

### Next.js Configuration (`next.config.mjs`)
- **Build Optimization**: Ignore ESLint/TypeScript errors (during build)
- **File Watching**: Polling-based file watching (3-second interval)
- **Caching**: Disable caching in development mode
- **External Packages**: Server component external package settings for `better-sqlite3`, `drizzle-orm`

### Environment Variable Management
- **DB Settings**: `DB_TYPE`, `DATABASE_URL`
- **API Keys**: `OPENAI_API_KEY`, `GOOGLE_API_KEY`, etc.
- **JWT**: Token secret management

## Security Considerations
- **Server-only**: `'server-only'` import for server-exclusive modules
- **API Keys**: Secure key management via environment variables
- **File Upload**: File type and size validation
- **SQL Safety**: SQL injection prevention via Drizzle ORM

## Performance Optimization
- **Dynamic Imports**: Page-specific code splitting
- **Translation Caching**: Performance improvement via i18n module caching
- **Image Optimization**: Use Next.js Image component
- **Suspense**: Asynchronous component loading optimization

## Pull Request Creation

### Steps

1. Check if there is an issue link. If not, ask: “Is there a related issue link?”
2. Unless instructed otherwise, assume the target merge branch is `main`.
3. Run:

   ```
   git diff origin/main...HEAD | cat
   ```

   to review the changes.
4. Create a draft PR with:

   ```bash
   git push origin HEAD && \
   echo -e "Draft PR {{changes}}\n\nRelated: {{issue_link}}" | \
   gh pr create --draft --title "Update {{feature}}" --body-file - && \
   gh pr view --web
   ```


Follow these rules to write code that aligns with the KKOT WebUI project architecture. 